openapi: 3.0.0
info:
  title: Autobarn API
  description: |
    The Autobarn API, as used in Dylan Beattie's workshop
    [Introduction to Distributed Systems with .NET](https://urs.tl/dsnet).

    (Yep, your description can have multiple lines and contain Markdown! Cool!)
  version: 1.0.0
servers:
  - url: /api
paths:
  /vehicles:
    get:
      tags:
        - Vehicles
      summary: Returns a list of vehicles.
      description: Returns a list of all the vehicles available in the Autobarn database
      parameters:
        - in: query
          name: startsWith
          schema:
            type: char
          description: The letter with which the vehicle license plate starts
      responses:
        '200':    # status code
          description: A JSON array of vehicle objects
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/vehicle'
  /vehicles/{reg}:
    put:
      summary: Create or update a vehicle
      tags:
        - Vehicles
      consumes:
        - application/json
      parameters:
        - $ref: '#/components/parameters/reg'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vehicle'
      responses:
        200:
          description: OK.
        201:
          description: Created.
    get:
      tags:
        - Vehicles
      parameters:
        - $ref: '#/components/parameters/reg'
      responses:
        '404':
          description: There is no vehicle in the system matching that registration
        '200':    # status code
          description: A vehicle object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/vehicle'

components:
  parameters:
    reg:
      name: reg
      in: path
      schema:
        type: string
      required: true
      description: The registration plate of the vehicle you want to get
  schemas:
    vehicle:
      type: object   # Data type
      properties: 
        registration:
          type: string
        modelCode:
          type: string
        color: 
          type: string
        year:
          type: integer
      example:
        registration: OUTATIME
        modelCode: dmc-delorean
        color: Silver
        year: 1985
